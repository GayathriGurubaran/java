Java: Telusko
   USES:
      * Enterprice market
      * Mobile development
      * web development

   There are totally 4 types of application in java they are :
             1.Standalone Application: Eg, Anti Virusus, Media Player 
             2.Web Application: Eg, Servlet, JSP, Struts , Spring, Hibernate , JSF
             3. Enterprise Application
             4.Mobile Application 
1. Java was developed by James Gosling, who is known as the father of Java, in 1995. James Gosling
 and his team members started the project in the early '90s.

2. James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June
   1991. The small team of sun engineers called (Green Team).

3.Firstly, it was called "Greentalk" by James Gosling, and the file extension was .gt.

4. After that, it was called Oak and was developed as a part of the Green project.
------------------------------------------------------------------------------------------------

Functions :
  it is a block of code that performs a specific task and can be reused .
  eg : returnType functionName(parameters) {
    // Function Body
    return value; // (if returnType is not void)
}


void meaning :
   public class Example {
    // A function that prints a message (no return)
    static void greet() {
        System.out.println("Hello, welcome to Java!");
    }

    public static void main(String[] args) {
        greet();  // Calling the function
    }
}
op : 
 Hello, welcome to Java!


When a function does not return any value, we use void as its return type.

Meaning: The function executes some task but does not return a value to the caller.

Functions with return type (Not void):
  If a function returns a value, we must specify its return type (e.g., int, double, String).

eg :

  public class Example {
    // Function that returns an integer
    static int add(int a, int b) { // returning int type that (static int )
        return a + b;  // Returning sum
    }

    public static void main(String[] args) {
        int result = add(5, 10);  // Storing returned value
        System.out.println("Sum: " + result);
    }
}
------------------------------------------------------------------------

types of functions : 
1. predefined functions :
   eg : Math.pow(x, y), Math.sqrt(x), Math.max(a, b), etc.
2. user defined functions :
   which is defined by us 
3. Functions with parameters and return type 
4. Functions overloading :
    saem name with different parameters 
eg : public class Example {
    // Function to multiply two numbers
    static int multiply(int a, int b) {
        return a * b;
    }
    
    // Overloaded function with three parameters
    static int multiply(int a, int b, int c) {
        return a * b * c;
    }

    public static void main(String[] args) {
        System.out.println(multiply(5, 10));     // Calls first multiply()
        System.out.println(multiply(2, 3, 4));   // Calls second multiply()
    }
}

5. functions with variable arguments 
6. Pass by value 
------------------------------------------------------------------------------------------

Static :-
   Why we use static 

Original code for reusion :-

class RecursionExample {
    static int factorial(int n) {
        if (n == 1) {  // 🛑 Base case: Stop when n = 1
            return 1;
        }
        return n * factorial(n - 1); // 🔁 Recursive call: Call itself
    }

    public static void main(String[] args) {
        int num = 5;
        System.out.println("Factorial of " + num + " is: " + factorial(num));
    }
}

Question :- Why we use static there 
 Why Use static?
👉 In Java, if we call a method inside main(), it must be either:
✅ A static method
✅ Called using an object

Since main() is static, it can only call another static method directly.

If we remove static, the compiler will give an error saying:

"Cannot make a static reference to a non-static method"
(Meaning: main() is static, but factorial() isn’t, so it won’t work.)


  📌 What If We Don't Use static?
If we remove static, we need to create an object to call the function:

class RecursionExample {
    int factorial(int n) {
        if (n == 1) return 1;
        return n * factorial(n - 1);
    }

    public static void main(String[] args) {
        RecursionExample obj = new RecursionExample(); // 👈 Create an object
        System.out.println("Factorial of 5: " + obj.factorial(5)); 
    }
}

📌 1️⃣ What Does static Mean?
👉 In Java, static means "belongs to the class, not to objects."
👉 If a method or variable is static, it is shared among all objects of the class.

🔴 Without static → Each object has its own copy of the method/variable.
🟢 With static → There is only one copy, shared by all objects.

   
class Student {
    static String college = "MVIT"; // 👈 `static` variable (shared)
    String name; // 👈 Normal variable (unique for each object)

    Student(String name) {
        this.name = name;
    }

    void show() {
        System.out.println(name + " studies at " + college);
    }
}

public class StaticExample {
    public static void main(String[] args) {
        Student s1 = new Student("Gayathri");
        Student s2 = new Student("Jaya");

        s1.show();
        s2.show();
    }
}
📌 1️⃣ Can We Change a static Variable?
Yes, we can change a static variable! But when we change it, it affects all objects because static variables are shared.

🔴 Example:

class Student {
    static String college = "MVIT"; // 👈 Static variable (shared)
    String name;

    Student(String name) {
        this.name = name;
    }

    void show() {
        System.out.println(name + " studies at " + college);
    }
}
public class StaticChangeExample {
    public static void main(String[] args) {
        Student s1 = new Student("Gayathri");
        Student s2 = new Student("Jaya");

        s1.show(); // ✅ MVIT
        s2.show(); // ✅ MVIT

        // 🔥 Change the static variable
        s1.college = "IIT Madras"; 

        s1.show(); // ❌ Now changed to "IIT Madras"
        s2.show(); // ❌ Now changed to "IIT Madras"
    }
}

📌 2️⃣ But, What's the Right Way?
👉 Instead of s1.college, it's better to use Student.college because college is static.

🔴 Better Way:

Student.college = "IIT Madras"; // ✅ Best way
👉 Why?
Because college belongs to the class, not just s1. Using Student.college makes it clear that we are changing a static variable.
--------------------------------------------------------------------------------------------------------------------------------------------

In how many ways we can write a Java program?

1) By changing the sequence of the modifiers, method prototype is not changed in Java.

Let's see the simple code of the main() method.

* static public void main(String args[])  

2) The subscript notation in the Java array can be used after type, before the variable or after the variable.

Let's see the different codes to write the main method.

public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  


3) You can provide var-args support to the main() method by passing 3 ellipses (dots)

Let's see the simple code of using var-args in the main() method. We will learn about var-args later in the Java New Features chapter.

*public static void main(String... args)  
----------------------------------------------------------------------------------------------------------------

Difference between the String... args and String[] args :-


 Example 1: main(String[] args) vs main(String... args)

  *Both are same in behavior.

1. public class FoodTest1 {
    public static void main(String[] args) {
        System.out.println("Welcome to the party!");
        for (String item : args) {
            System.out.println("You brought: " + item);
        }
    }
}


2.public class FoodTest1 {
    public static void main(String... args) {
        System.out.println("Welcome to the party!");
        for (String item : args) {
            System.out.println("You brought: " + item);
        }
    }
}



gives the same output , but the difference will be in using this in the our own method 


 Example 2: Using String[] in your own method

public class FoodTest2 {
    static void serveFood(String[] items) {
        for (String item : items) {
            System.out.println("Serving: " + item);
        }
    }

    public static void main(String[] args) {
        String[] order = {"Donut", "Tea", "Puffs"};
        serveFood(order);  // ❗ You must create array and pass it
    }
}


 Example 3: Using String... (var-args) in your own method

public class FoodTest3 {
    static void serveFood(String... items) {
        for (String item : items) {
            System.out.println("Serving: " + item);
        }
    }

    public static void main(String[] args) {
        serveFood("Ice Cream", "Milkshake", "Cupcake");  // 😍 No need to create array!
        serveFood(); // ✅ You can even call with no items!
    }
}

-----------------------------------------------------------------------------------------------
Internal details at compile time :-
         At compile time, the Java file is compiled by Java compiler (It does not interact with OS) and converts the Java code into bytecode.


 .java (source) 
→ javac → 
.class (bytecode) 
→ Class Loader (JVM) 
→ Bytecode Verifier 
→ Interpreter / JIT 
→ Runtime (JVM) 
→ Machine Code 
→ CPU executes

----------------------------------------------------------------------------------
 What’s happening behind the scenes?

The javac compiler (present in JDK’s bin/ folder) reads your .java file.

It converts the source code into a .class file.

This .class file contains Bytecode, not real machine code.

This .class file is now ready to be passed to the JVM.

Now JVM enters the scene :-

java Machan // code 
     This java command is also part of the JDK's bin/ folder, but it belongs to JRE.
Once the .class file is passed to JVM:

Class Loader loads the .class file into memory.

Bytecode Verifier checks if it’s safe to run.

Interpreter/JIT converts it to machine code.

Runtime executes it and interacts with your system (heap, threads, GC).

CPU runs it. 
---------------------------------------------------------------------------------------
Difference Between the JVM , JRE , JDK :-

JVM:-
it is an abstract machine.  it doesn't physically exist.
* It is a specification that provides a runtime environment in which Java bytecode can be executed. 

* NOTE :-
         JVM, JRE, and JDK are platform dependent because the configuration of each OS 
is different from that of others. However, Java is platform independent

JRE :-
    It physically exists. It contains a set of libraries + other files that the JVM uses at runtime.

JDK:-
         The Java Development Kit (JDK) is a software development environment that is used to develop Java applications and applets.
It physically exists. It contains JRE + development tools.


